<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>培风的博客</title>
  
  <subtitle>风之积也不厚，则其负大翼也无力。</subtitle>
  <link href="http://peifengcoding.com/atom.xml" rel="self"/>
  
  <link href="http://peifengcoding.com/"/>
  <updated>2025-07-29T15:23:19.030Z</updated>
  <id>http://peifengcoding.com/</id>
  
  <author>
    <name>培风</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GameFramework框架学习</title>
    <link href="http://peifengcoding.com/posts/93c88b6.html"/>
    <id>http://peifengcoding.com/posts/93c88b6.html</id>
    <published>2025-07-16T15:19:16.000Z</published>
    <updated>2025-07-29T15:23:19.030Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="GameFramework学习-一-GF-Base"><a href="#GameFramework学习-一-GF-Base" class="headerlink" title="GameFramework学习(一) GF_Base"></a>GameFramework学习(一) GF_Base</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在我大三的时候，我第一次接触到游戏开发。通过参加几次GameJam，我对游戏开发产生了浓厚的兴趣，并迅速开始了我的实习生涯。我有幸在一家专注于二次元手游开发的公司工作了9个月。在这段时间里我真正地接触到了实际投入商业使用的游戏框架，可以说对它的框架使用已经非常熟悉，但这并不能说我真正的搞懂了框架。之前在看过公司的框架之后在网上东拼西凑自己搞了个小框架用在自己参与的独游项目上，沾沾自喜以为自己学会了框架，结果却弄得满地鸡毛。<br>所以框架到底是什么，这里我直接摘抄网络上的定义:<br><strong>框架‌是为特定领域或问题提供基础结构、规范与可扩展性的软件或理论体系，包含预定义的设计模式、类库和工具，允许开发者通过填充具体逻辑实现定制功能。</strong><br>在我看来，框架应当在它所在的领域足够泛用，它应当是该领域所有地方需要用到工具的交集。那么对于一个游戏框架，它就应当只包含任何类型游戏开发都共同需要使用到的工具，比如UI模块，资源管理模块等等。<br>而在社区里，有这么几款游戏框架总是被广泛讨论，它们因为其高度的规范性、健壮性和可拓展性被大家使用，甚至被投入到商业开发中，比如ET、GameFramework。<br>我在刚学习游戏框架的时候就听说了GameFramework的大名，工作中遇到的框架在设计上也总是能见到GameFramework的影子，但是因为之前工作过于烦忙，还要准备校招，实在没有一个好机会能够静下心来好好地去拜读GameFramework的源码。而这次，因为校招进入一家新公司，我们有为期数月的培训，而其中一个任务便是阅读GameFramework源码。这是一次绝佳的机会，让我能够去做我之前想做但是却没时间做的事。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p><a href="https://gameframework.cn/">GameFramework</a>实际上有两层，一层为GameFramework，它不依赖Unity和其它任何第三方工具，以程序集的方式提供。另一层是UnityGameFramework，它依赖GameFramework和Unity相关程序集。<br>那么在这一期我们先来看GameFramework层的Base部分。</p><h2 id="GFModule管理"><a href="#GFModule管理" class="headerlink" title="GFModule管理"></a>GFModule管理</h2><p>GameFramework的框架入口为GameFrameworkEntry，GameFramework框架的所有模块都需要实现GameFrameworkModule抽象类。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 游戏框架模块抽象类。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">GameFrameworkModule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取游戏框架模块优先级。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span>优先级较高的模块会优先轮询，并且关闭操作会后进行。<span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">virtual</span> <span class="built_in">int</span> Priority</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 游戏框架模块轮询。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;elapseSeconds&quot;&gt;</span>逻辑流逝时间，以秒为单位。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;realElapseSeconds&quot;&gt;</span>真实流逝时间，以秒为单位。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="built_in">float</span> elapseSeconds, <span class="built_in">float</span> realElapseSeconds</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 关闭并清理游戏框架模块。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Shutdown</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用模块时都会使用类中的GetModule懒加载模块并加入到一个链表中，以下是部分代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取游戏框架模块。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>要获取的游戏框架模块类型。<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>要获取的游戏框架模块。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;remarks&gt;</span>如果要获取的游戏框架模块不存在，则自动创建该游戏框架模块。<span class="doctag">&lt;/remarks&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">GetModule</span>&lt;<span class="title">T</span>&gt;() <span class="keyword">where</span> T : <span class="keyword">class</span></span></span><br><span class="line">&#123;</span><br><span class="line">    Type interfaceType = <span class="keyword">typeof</span>(T);</span><br><span class="line">    <span class="keyword">if</span> (!interfaceType.IsInterface)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(Utility.Text.Format(<span class="string">&quot;You must get module by interface, but &#x27;&#123;0&#125;&#x27; is not.&quot;</span>, interfaceType.FullName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!interfaceType.FullName.StartsWith(<span class="string">&quot;GameFramework.&quot;</span>, StringComparison.Ordinal))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(Utility.Text.Format(<span class="string">&quot;You must get a Game Framework module, but &#x27;&#123;0&#125;&#x27; is not.&quot;</span>, interfaceType.FullName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> moduleName = Utility.Text.Format(<span class="string">&quot;&#123;0&#125;.&#123;1&#125;&quot;</span>, interfaceType.Namespace, interfaceType.Name.Substring(<span class="number">1</span>));</span><br><span class="line">    Type moduleType = Type.GetType(moduleName);</span><br><span class="line">    <span class="keyword">if</span> (moduleType == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> GameFrameworkException(Utility.Text.Format(<span class="string">&quot;Can not find Game Framework module type &#x27;&#123;0&#125;&#x27;.&quot;</span>, moduleName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> GetModule(moduleType) <span class="keyword">as</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而对于这个链表，GF会去不断地轮询遍历Module。这样子就有了一个最基本的模块统一管理</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 所有游戏框架模块轮询。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;elapseSeconds&quot;&gt;</span>逻辑流逝时间，以秒为单位。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;realElapseSeconds&quot;&gt;</span>真实流逝时间，以秒为单位。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"><span class="built_in">float</span> elapseSeconds, <span class="built_in">float</span> realElapseSeconds</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (GameFrameworkModule module <span class="keyword">in</span> s_GameFrameworkModules)</span><br><span class="line">    &#123;</span><br><span class="line">        module.Update(elapseSeconds, realElapseSeconds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="ReferencePool-引用池"><a href="#ReferencePool-引用池" class="headerlink" title="ReferencePool(引用池)"></a>ReferencePool(引用池)</h2><p>引用池一般用来存储C#类实例，它可以说的上是GF的基石，GF的许多模块都大量地使用到它来优化性能，比如时间模块，网络模块等，可以说，只要涉及到大量重复地创建并销毁的操作的，都可以使用它来进行优化。<br>它主要是通过复用之前使用过的实例，来避免频繁地创建和销毁，这种思想在游戏开发中尤其常见，也异常重要。具体做法其实也非常简单，维护一个列表(或者别的什么数据结构，最好出队入队的算法复杂度都为O(1))。因为引用池不会去做遍历，基本上只会去push和pop。</p><h3 id="GF引用池实现"><a href="#GF引用池实现" class="headerlink" title="GF引用池实现"></a>GF引用池实现</h3><p>了解了引用池的原理，我们就可以更好地去理解GF对于引用池的设计。</p><h4 id="IReference引用池接口、"><a href="#IReference引用池接口、" class="headerlink" title="IReference引用池接口、"></a>IReference引用池接口、</h4><p>首先就是引用池的接口。以下是GF的实现</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 引用接口。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IReference</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 清理引用。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Clear</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的引用池对象都需要实现这个接口，这个接口一定要实现Clear方法，来在引用池对象释放的时候调用这个方法，这样子做的精妙之处就在于可以清晰地知道引用池对象该如何清理自己，保证下一次取出的时候是全新的状态。<br>这一个简单的接口就给予了引用池对象巨大的安全性，保证了对象的状态重置。</p><h4 id="ReferencePool引用池"><a href="#ReferencePool引用池" class="headerlink" title="ReferencePool引用池"></a>ReferencePool引用池</h4><p>接下来就是引用池设计，引用池是一个静态类，总体上说，它通过维护一个Key为对象类型，Value为引用池信息的自定义类的字典来达到复用的目的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> Dictionary&lt;Type, ReferenceCollection&gt; s_ReferenceCollections = <span class="keyword">new</span> Dictionary&lt;Type, ReferenceCollection&gt;();</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 获取所有引用池的信息。</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>所有引用池的信息。<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ReferencePoolInfo[] <span class="title">GetAllReferencePoolInfos</span>()；</span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// 清除所有引用池。</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ClearAll</span>()</span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// 从引用池获取引用。</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;typeparam name=&quot;T&quot;&gt;引用类型。&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;returns&gt;引用。&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">Acquire</span>&lt;<span class="title">T</span>&gt;() <span class="keyword">where</span> T : <span class="keyword">class</span>, IReference, <span class="keyword">new</span>()</span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// 从引用池获取引用。</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;param name=&quot;referenceType&quot;&gt;引用类型。&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;returns&gt;引用。&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IReference <span class="title">Acquire</span>(<span class="params">Type referenceType</span>)</span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// 将引用归还引用池。</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;param name=&quot;reference&quot;&gt;引用。&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Release</span>(<span class="params">IReference reference</span>)</span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// 向引用池中追加指定数量的引用。</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;typeparam name=&quot;T&quot;&gt;引用类型。&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;param name=&quot;count&quot;&gt;追加数量。&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Add</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">int</span> count</span>) <span class="keyword">where</span> T : <span class="keyword">class</span>, IReference, <span class="keyword">new</span>()</span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// 向引用池中追加指定数量的引用。</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;param name=&quot;referenceType&quot;&gt;引用类型。&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;param name=&quot;count&quot;&gt;追加数量。&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">Type referenceType, <span class="built_in">int</span> count</span>)</span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// 从引用池中移除指定数量的引用。</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;typeparam name=&quot;T&quot;&gt;引用类型。&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;param name=&quot;count&quot;&gt;移除数量。&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Remove</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">int</span> count</span>) <span class="keyword">where</span> T : <span class="keyword">class</span>, IReference</span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// 从引用池中移除指定数量的引用。</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;param name=&quot;referenceType&quot;&gt;引用类型。&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;param name=&quot;count&quot;&gt;移除数量。&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">Type referenceType, <span class="built_in">int</span> count</span>)</span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// 从引用池中移除所有的引用。</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;typeparam name=&quot;T&quot;&gt;引用类型。&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RemoveAll</span>&lt;<span class="title">T</span>&gt;() <span class="keyword">where</span> T : <span class="keyword">class</span>, IReference</span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// 从引用池中移除所有的引用。</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="comment">/// &lt;param name=&quot;referenceType&quot;&gt;引用类型。&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RemoveAll</span>(<span class="params">Type referenceType</span>)</span></span><br></pre></td></tr></table></figure><h4 id="ReferenceCollection引用池收集"><a href="#ReferenceCollection引用池收集" class="headerlink" title="ReferenceCollection引用池收集"></a>ReferenceCollection引用池收集</h4><p>这个便是对应每一个引用池对象的一个收集器，它内部实际维护一个队列，通过队列的入队出队，来实现引用池对象的复用，当需要使用对象时，从队列中出队一个对象使用，使用结束后，调用Clear方法将对象恢复原样并重新入队到队列中供其它地方复用。</p><pre><code class="language-csharp">private readonly Queue&lt;IReference&gt; m_References;private readonly Type m_ReferenceType;private int m_UsingReferenceCount;private int m_AcquireReferenceCount;private int m_ReleaseReferenceCount;private int m_AddReferenceCount;private int m_RemoveReferenceCount;</code></pre><p>GF的引用池收集器不仅维护了引用池对象的队列，还维护了许多的数值，包括当前使用的对象数，获取释放的对象数，添加移除的对象数，这样子可以方便我们去了解实际的对象池性能，来做更好的优化。</p><hr><h2 id="EventPool-事件池"><a href="#EventPool-事件池" class="headerlink" title="EventPool(事件池)"></a>EventPool(事件池)</h2><p>事件系统是每个框架都必不可少的一个模块，它是解耦不同模块之间耦合的利器。本质上来说，事件其实就是观察者模式的实现，对象可以注册事件到事件管理器中，其实就是告诉事件中心我依赖这个对应ID的事件，那么当我们在一些情况下触发这个ID事件的时候，所有依赖这个事件的对象都会触发注册的方法来更新自身。这样子就做到了解耦两个对象的目的。</p><h4 id="真的解耦了吗"><a href="#真的解耦了吗" class="headerlink" title="真的解耦了吗"></a>真的解耦了吗</h4><p>这是我以前非常困惑的地方，所以我就额外写一下。<br>首先，耦合的本质，是一个模块对另一个模块的依赖程度。<br>那么在我看来完全无耦合的系统是不存在的，因为模块间总需要某种形式的协作。<br>事件中心真正的作用，是将直接耦合变为间接耦合，A不再直接知道B的存在，而是都依赖事件中心。</p><h3 id="GF事件池实现"><a href="#GF事件池实现" class="headerlink" title="GF事件池实现"></a>GF事件池实现</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Unity" scheme="http://peifengcoding.com/categories/Unity/"/>
    
    <category term="框架学习" scheme="http://peifengcoding.com/categories/Unity/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="GameFramework" scheme="http://peifengcoding.com/categories/Unity/%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/GameFramework/"/>
    
    
    <category term="Unity" scheme="http://peifengcoding.com/tags/Unity/"/>
    
    <category term="C#" scheme="http://peifengcoding.com/tags/C/"/>
    
    <category term="GameFramework" scheme="http://peifengcoding.com/tags/GameFramework/"/>
    
  </entry>
  
  <entry>
    <title>GameFrameWork学习笔记</title>
    <link href="http://peifengcoding.com/posts/1e9ce914.html"/>
    <id>http://peifengcoding.com/posts/1e9ce914.html</id>
    <published>2025-06-28T13:49:50.000Z</published>
    <updated>2025-07-16T15:18:06.983Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
    <summary type="html">这篇文章是我的第一个博客，测试用</summary>
    
    
    
    <category term="测试" scheme="http://peifengcoding.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="Unity" scheme="http://peifengcoding.com/tags/Unity/"/>
    
    <category term="C#" scheme="http://peifengcoding.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://peifengcoding.com/posts/4a17b156.html"/>
    <id>http://peifengcoding.com/posts/4a17b156.html</id>
    <published>2025-06-28T13:44:31.604Z</published>
    <updated>2025-06-29T14:26:55.902Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
